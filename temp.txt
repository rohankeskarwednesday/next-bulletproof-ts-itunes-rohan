import { createEntityAdapter, createSelector } from "@reduxjs/toolkit";
import { convertObjectToCamelCase } from "@utils";
import { itunesApiService } from "@utils/apiUtils";

type Params = {
  searchTerm: string;
  offset: number;
  limit: number;
};

const songsAdapter = createEntityAdapter();

const initialState = songsAdapter.getInitialState();

export const songsApi = itunesApiService.injectEndpoints({
  endpoints: builder => ({
    fetchSongs: builder.query<any, object>({
      query: (params: Params) => {
        if (!params.searchTerm || !params.offset || !params.limit) {
          throw new Error("Invalid params");
        }

        return `search?term=${params.searchTerm}&offset=${params.offset}&limit=${params.limit}`;
      },
      transformResponse: (response: any) => {
        songsAdapter.setAll(initialState, response);
        return convertObjectToCamelCase<any>(response);
      },
      providesTags: ["Tracks"],
    }),
  }),
  overrideExisting: false,
});

export const { useFetchSongsQuery } = songsApi;

export const selectSongsResult: any = songsApi.endpoints.fetchSongs.select();

const selectSongsData = createSelector(
  selectSongsResult,
  songResult => songResult.data // normalized state object with ids & entities
);

export const {
  selectAll: selectAllSong,
  selectById: selectSongById,
  selectIds: selectSongIds,
} = songsAdapter.getSelectors((state: any) => selectSongsData(state) ?? initialState);
